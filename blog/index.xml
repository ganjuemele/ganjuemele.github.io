<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on 么了&#39;s 博客</title>
    <link>/blog/</link>
    <description>Recent content in Blog on 么了&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 24 Feb 2020 10:22:40 +0800</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git远程仓库</title>
      <link>/blog/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 24 Feb 2020 10:22:40 +0800</pubDate>
      
      <guid>/blog/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>git 远程仓库 用SSH地址，复制ssh地址
ssh-keygen -t rsa -b 4096 -C 你的邮箱 cat ~/.ssh/id_rsa.pub # 得到公钥内容 ssh -T git@github.com git remote add origin git@xxxxxxx git push -u origin master 新建了一个名为 ’19-12-26’ 的公钥 id_rsa 和 id_rsa.pub
git remote add origin git@XXXXXX 在本地添加远程仓库地址
origin是远程仓库的默认名字，可以换，建议不换
⚠️不要使用https地址，因为每次都需要密码
电脑上存放私钥，github留下公钥
上传代码是用私钥加密，github用公钥解密
git push -u origin master 推送本地 master 分支到远程 origin的master 分支
⚠️如果 提示 应该git pull…，那就git pull 一下
git pull是先把远程分支合并到本地对应的分支
如果远程分支没有更新过，才能省略 git pull
-u origin master 的意思是设置上游分支
之后就不用设置上游分支课，直接git pull；git push；</description>
    </item>
    
    <item>
      <title>Git本地仓库</title>
      <link>/blog/git-local/</link>
      <pubDate>Sun, 23 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/git-local/</guid>
      <description>使用github程序 &amp;raquo; install command line tool 来安装git
git config --global user.name 你的英文名 git config --global user.email 你的邮箱 git config --global push.default simple git config --global core.quotepath false git config --global core.autocrlf input 新建目录 &amp;raquo; 进入 &amp;raquo; git init
git add 路径 //选择哪些变动是需要提交的
.gitignore 是设置不需要提交的文件 //常见有::node_modules::; ::.DS_Store::; ::.idea::; ::.vscode::
git status 查看已经提交的文件
git status -sb 查看哪些文件有冲突
git commit -m “字符串”
git commit -v
git log 查看已提交更新的版本
git add . git commit -v git reset —hard a2bv7r //commit的版本号值</description>
    </item>
    
    <item>
      <title>Axios笔记</title>
      <link>/blog/axios-note/</link>
      <pubDate>Sat, 22 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/axios-note/</guid>
      <description>Axios笔记 this.$axios.get(’/toutiao/index’, { //::这里设置域名参数:: params:{ key:’4ac7dbb103ad3977c50735edb9651431’, type:’tiyu’ }, //请求头配置 headers: {&#39;token&#39;:token } }) .then(res =&amp;gt; { this.newsList= res.data console.log(this.newsList) }) .catch( err=&amp;gt; { console.log(’新闻异常’) })  Axios 是一个基于 promise 的 HTTP 库 其特性：
 可以在浏览器中发送 XMLHttpRequests 可以在 node.js 中发送 http 请求 支持 Promise API 拦截请求和响应 能取消请求 转换请求数据和相应数据 自动转换 Json 数据 客户端支持保护安全免受 XSRF 攻击  </description>
    </item>
    
    <item>
      <title>Mac 破解 sublime Text3</title>
      <link>/blog/sublime%E7%A0%B4%E8%A7%A3/</link>
      <pubDate>Fri, 21 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/sublime%E7%A0%B4%E8%A7%A3/</guid>
      <description>最新破解教程
步骤：  打开终端，输入 sudo vi /etc/hosts ，输入密码 打开编辑器，按 a 开始编辑模式 在文档最后插入  127.0.0.1 www.sublimetext.com 127.0.0.1 license.sublimehq.com 按 esc 退出编辑模式，输入 :wq 保存并退出 在sublime中输入如下license，即可激活  ----- BEGIN LICENSE ----- Member J2TeaM Single User License EA7E-1011316 D7DA350E 1B8B0760 972F8B60 F3E64036 B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD FA0A2ABE 25F65BD8 D51458E5 3923CE80 87428428 79079A01 AA69F319 A1AF29A4 A684C2DC 0B1583D4 19CBD290 217618CD 5653E0A0 BACE3948 BB2EE45E 422D2C87 DD9AF44B 99C49590 D2DBDEE1 75860FD2 8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864 ------ END LICENSE ------ 以上license对，sublime V3.</description>
    </item>
    
    <item>
      <title>cmd的操作</title>
      <link>/blog/cmd/</link>
      <pubDate>Wed, 19 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/cmd/</guid>
      <description>npm i -g tldr 太长不想读
recursive 递归的
echo 回声 ::echo::
force 强制
change 改变 cd中的::c::
directory 文件夹/目录 cd中的::d::
make ::mk::
move ::mv::
remove ::rm::
copy ::cp::
list ::ls::
link ::ln::
find ::find::
touch ::touch::
::pwd:: 展示当前的绝对路径
clear 清屏
 查看文件内容 cat 路径 全部查看
head 路径 头10行
tail 路径 尾10行
less 路径 看其中一屏部分
 增 touch 文件名
echo 内容 &amp;gt; 1.js //新建文件并添加内容
echo 内容 &amp;gt;&amp;gt; 1.js //追加内容到文件
echo -e “内/n容” &amp;gt;&amp;gt; 1.</description>
    </item>
    
    <item>
      <title>Hugo的配置</title>
      <link>/blog/hugo%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 10 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/hugo%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
      <description>首先需要将 themes/future-imperfect/examplesite/config.toml 复制到根目录替换原文件；  baseurl = &amp;#34;/&amp;#34; # 网站根路径，可以写成你后期站点对应的域名 languageCode = &amp;#34;en-us&amp;#34; # 网站支持语言 title = &amp;#34;Hugo Future Imperfect&amp;#34; # 网站标题 theme = &amp;#34;hugo-future-imperfect&amp;#34; # 网站主题 preserveTaxonomyNames = true paginate = 3 # 文章超出几篇后产生分页 disqusShortname = &amp;#34;shortname&amp;#34; googleAnalytics = &amp;#34;&amp;#34; pluralizeListTitles = false # Set the followings to true as part of your site SEO enableRobotsTXT = true canonifyURLs = true # [params] 下面的值将会构成模板里的 .Site.Params 变量 [params] # Sets the meta tag description description = &amp;#34;HTML5 UP theme, Future Imperfect with some extra goodies, ported by Julio Pescador.</description>
    </item>
    
    <item>
      <title>toml文档格式的数据定义</title>
      <link>/blog/toml/</link>
      <pubDate>Sun, 02 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/toml/</guid>
      <description>TOML　的全称是　Tom’s Obvious, Minimal Language，因为它的作者是 GitHub　联合创始人　Tom Preston-Werner 。
 TOML是大小写敏感的 # 表示注释 可以按照自己的意愿使用空格或者Tab缩进  先写一个 Hugo 博客/md文档的配置规范 +++ title = &amp;#34;标题名称&amp;#34; description = &amp;#34;&amp;#34; //副标题 draft = false //草稿 author = &amp;#34;么了&amp;#34; date = &amp;#34;2019-04-02&amp;#34; categories = [&amp;#34;笔记&amp;#34;,博客&amp;#34;&amp;#34;] // 设置分类，支持数组格式 series = [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;] slug = &amp;#34;url的尾部&amp;#34; tags = [] keywords: [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;] featured = &amp;#34;pic01.jpg&amp;#34; //外部索引图片地址用文件夹 /年份/月份/pic.jpg featuredalt = &amp;#34;Pic 1&amp;#34; featuredpath = &amp;#34;date&amp;#34; // 也可使用绝对路径 linktitle = &amp;#34;&amp;#34; publishdate // 定时未来发布的时间 type = &amp;#34;post&amp;#34; metaDataFormat = &amp;#34;toml&amp;#34; languageCode = &amp;#34;en-us&amp;#34; date = &amp;#34;2014-09-29T21:54:53-05:00&amp;#34; weight // 排序的权重，默认按时间降序 +++ Hugo 的 markdown 文件前置数据定义结构，支持三种格式的语法类型 例如： yaml --- title: &amp;#34;My First Post&amp;#34; date: 2019-03-26T08:47:11+01:00 draft: true --- toml +++ title: &amp;#34;My First Post&amp;#34; date: 2019-03-26T08:47:11+01:00 draft: true +++ json { &amp;#34;title&amp;#34;: &amp;#34;{{ replace .</description>
    </item>
    
  </channel>
</rss>