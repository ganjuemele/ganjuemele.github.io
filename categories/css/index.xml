<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on 么了&#39;s 博客</title>
    <link>/categories/css/</link>
    <description>Recent content in CSS on 么了&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 17 Sep 2020 12:22:40 +0800</lastBuildDate>
    
	<atom:link href="/categories/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>css动画</title>
      <link>/blog/css-transition/</link>
      <pubDate>Thu, 17 Sep 2020 12:22:40 +0800</pubDate>
      
      <guid>/blog/css-transition/</guid>
      <description>.coupon-type .selected { color: #00B893; width: 20vw; padding-bottom: 2.6vw; position: relative; } .coupon-tab .selected::before { position: absolute; width: 20vw; left: 0; content: &amp;#39;&amp;#39;; bottom: 0; animation: tabBorder 500ms ease alternate; //tabBorder是动画的事件名 border-bottom: .6vw solid #00B893; } @keyframes tabBorder { //过渡left和width属性 0% {transition: left,width;left: 50%;width:0;} 100% {transition: left,width;width:20vw;left: 0;} } </description>
    </item>
    
    <item>
      <title>CSS 的各种选择器</title>
      <link>/blog/css%E9%80%89%E6%8B%A9%E5%99%A8/</link>
      <pubDate>Thu, 26 Mar 2020 20:22:40 +0800</pubDate>
      
      <guid>/blog/css%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
      <description>组合选择器 `E,F` 多元素选择器，使用`逗号`分隔，同时匹配元素E和元素F `E F` 后代选择器，用`空格`分隔，匹配E元素所有的后代元素F `E&amp;gt;F` 子元素选择器，用`&amp;gt;`分隔，匹配E元素的所有直接子元素 `E+F` 直接相邻选择器，匹配E元素之后的相邻的同级元素F `E～F` 普通相邻选择器（弟弟选择器），匹配E元素之后的同级元素F `element#id2.class1.class2#id1` id和class选择器连写时中间没有分隔符， `.`和`#`可以充当分隔符元素  属性选择器 `E[attr]` 匹配所有具有属性为attr的元素(div[id]能选择所有具有id属性的div) `E[attr=value]` 匹配所有属性为value的元素(div[type=text]匹配id=text的div) `E[attr~=value]` 匹配所有属性attr具有多个空格分隔，其中一个值等于value的元素 `E[attr^=value]` 匹配属性attr值以value开头的元素 `E[attr$=value]` 匹配属性attr值以value结尾的元素 `E[attr^=value]` 匹配属性attr值包含value的元素  伪类选择器 `E:first-child` 匹配元素E的第一个子元素 `E:last-child` 最后一个子元素 `E:nth-child(n)` 匹配其父元素的第n个子元素，1开始 `E:hover` 匹配鼠标悬停位置的E元素 `E:focus` 匹配获得焦点的E元素 `E:link` 匹配未被点击的链接 `E:active` 匹配鼠标已经按下、还没有释放的E元素 `E:visited` 匹配所有已被点击的链接 `E:first-of-type` 匹配父元素下使用同种标签的第一个子元素，等同于nth-of-type(1)  伪元素选择器 `E::before` 在E元素之前插入生成的内容 `E::after` 在E元素之后插入生成的内容 `E::first-line` 匹配E元素的第一行 `E::first-letter` 匹配E元素的第一个字母  </description>
    </item>
    
    <item>
      <title>css的calc属性</title>
      <link>/blog/css-calc/</link>
      <pubDate>Wed, 18 Mar 2020 22:40:40 +0800</pubDate>
      
      <guid>/blog/css-calc/</guid>
      <description>当不能确定一个页面元素的 width/height，需要计算之后才能取得值；
calc() 计算 calc() 函数用于动态计算长度值。
需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；
calc()函数支持&#39;+&amp;rsquo;，&#39;-&#39;，&#39;*&#39;，&#39;/&amp;lsquo;运算
.tags { padding: 12px 0; height: calc(100vh - 495px); overflow: auto; .current { display: flex; flex-flow: wrap; li { width: 16vw; height: 16vw; text-align: center; margin: 4px calc(10vw - 30px); } } } </description>
    </item>
    
    <item>
      <title>box-shadow样式</title>
      <link>/blog/box-shadow/</link>
      <pubDate>Mon, 16 Mar 2020 23:22:40 +0800</pubDate>
      
      <guid>/blog/box-shadow/</guid>
      <description>button { font-size: 24px; height: 64px; width: 25%; border: #fff solid 1px; box-shadow: inset -2px -2px 1px rgba(0,0,0,0.45); $bg: #f2f2f2; &amp;amp;:nth-child(1) { background: $bg; } &amp;amp;:nth-child(2), &amp;amp;:nth-child(5) { background: darken($bg, 4%); } &amp;amp;:nth-child(3), &amp;amp;:nth-child(6), &amp;amp;:nth-child(9) { background: darken($bg, 8%); } &amp;amp;:nth-child(4), &amp;amp;:nth-child(7), &amp;amp;:nth-child(10), &amp;amp;:nth-child(13) { background: darken($bg, 12%); } &amp;amp;:nth-child(8), &amp;amp;:nth-child(11) { background: darken($bg, 16%); } &amp;amp;:nth-child(12), &amp;amp;:nth-child(14) { background: darken($bg, 20%); } &amp;amp;:nth-child(15) { background: darken($bg, 25%); } } -2px 就是未按下状态的样式;</description>
    </item>
    
    <item>
      <title>transform &amp; transition</title>
      <link>/blog/transformtransition/</link>
      <pubDate>Tue, 10 Mar 2020 20:22:40 +0800</pubDate>
      
      <guid>/blog/transformtransition/</guid>
      <description>Transform transform 属性用于旋转、倾斜、缩放、平移
有XYZ轴方向
⚠️只能转换由盒模型定位的元素
 scale(-2，2) 横向和纵向的缩放 translate(50%, 30px) 对象进行3D空间的位移  translate(-50%, -50%) // 可以做绝对定位元素的居中  rotate（30deg） 旋转30度 skew（30deg, 45deg）横向和纵向的倾斜 transform: none不应用任何转换 可以组合使用  对浏览器的兼容性支持
 Transition 过渡 用来补充中间帧
transition: 属性名 时长，属性名 时长 过渡方式 延迟
 transition-property: 过渡效果的 css 属性名 transition-duration：过渡完成所需的时间 transition-timing-function：速度效果的曲线。（复杂） transition-delay：延迟  all 代表所有属性
⚠️并不是所有属性都能过渡</description>
    </item>
    
    <item>
      <title>浏览器渲染过程</title>
      <link>/blog/render/</link>
      <pubDate>Fri, 06 Mar 2020 20:22:40 +0800</pubDate>
      
      <guid>/blog/render/</guid>
      <description>浏览器渲染过程  根据HTML构建html树（DOM） 根据css构建css树（cssom） 将两棵树合并成一颗渲染树（render tree） layout布局（文档流、盒模型、计算大小和位置） paint绘制（把边框颜色、文字颜色、阴影等画出来） compose合成（根据层叠关系展示页面）  如何更新样式
一般采用 js 来更新样式
div.style.display=&amp;#39;none&amp;#39; div.classList.add(&amp;#39;red&amp;#39;) div.remove() //直接删除节点 样式更新方式
 </description>
    </item>
    
    <item>
      <title>Flex &amp; Grid</title>
      <link>/blog/flex-grid/</link>
      <pubDate>Wed, 12 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/flex-grid/</guid>
      <description>Flexbox display: flex; align-items纵向对齐元素，可选以下几个值：
 flex-start: 元素与容器的顶部对齐。 flex-end: 元素与容器的底部对齐。 center: 元素纵向居中。 baseline: 元素在容器的基线位置显示。 stretch: 元素被拉伸以填满整个容器。  justify-content横向对齐元素:
 space-between ：分散对齐 space-around ：平均等宽横向对齐 flex-start(default)：默认 左对齐 flex-end ：右对齐 center ：居中  flex-direction属性定义了元素在容器里摆放的方向:
 row: 元素摆放的方向和文字方向一致。 row-reverse: 元素摆放的方向和文字方向相反。 column: 元素从上放到下。 column-reverse: 元素从下放到上。  order属性 设置单个元素的order。元素的属性默认值为0，但是我们设置这个属性为正数或负数。改变的单个flex元素的顺序
align-self设置其中单个元素的交叉轴位置
 flex-start: 元素与容器的顶部对齐。 flex-end: 元素与容器的底部对齐。 center: 元素纵向居中。 baseline: 元素在容器的基线位置显示。 stretch: 元素被拉伸以填满整个容器。  flex-wrap
 nowrap: 所有的元素都在一行。 wrap: 元素自动换成多行。 wrap-reverse: 元素自动换成逆序的多行。  flex-flow 是 flex-direction + flex-wrap两个属性的合体 可以同时接受两个 属性值。</description>
    </item>
    
  </channel>
</rss>