<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>css on 么了&#39;s 博客</title>
    <link>/categories/css/</link>
    <description>Recent content in css on 么了&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 16 Mar 2020 23:22:40 +0800</lastBuildDate>
    
	<atom:link href="/categories/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>box-shadow样式</title>
      <link>/blog/box-shadow/</link>
      <pubDate>Mon, 16 Mar 2020 23:22:40 +0800</pubDate>
      
      <guid>/blog/box-shadow/</guid>
      <description>button { font-size: 24px; height: 64px; width: 25%; border: #fff solid 1px; box-shadow: inset -2px -2px 1px rgba(0,0,0,0.45); $bg: #f2f2f2; &amp;amp;:nth-child(1) { background: $bg; } &amp;amp;:nth-child(2), &amp;amp;:nth-child(5) { background: darken($bg, 4%); } &amp;amp;:nth-child(3), &amp;amp;:nth-child(6), &amp;amp;:nth-child(9) { background: darken($bg, 8%); } &amp;amp;:nth-child(4), &amp;amp;:nth-child(7), &amp;amp;:nth-child(10), &amp;amp;:nth-child(13) { background: darken($bg, 12%); } &amp;amp;:nth-child(8), &amp;amp;:nth-child(11) { background: darken($bg, 16%); } &amp;amp;:nth-child(12), &amp;amp;:nth-child(14) { background: darken($bg, 20%); } &amp;amp;:nth-child(15) { background: darken($bg, 25%); } } -2px 就是未按下状态的样式;</description>
    </item>
    
    <item>
      <title>transform &amp; transition</title>
      <link>/blog/transformtransition/</link>
      <pubDate>Tue, 10 Mar 2020 20:22:40 +0800</pubDate>
      
      <guid>/blog/transformtransition/</guid>
      <description>Transform transform 属性用于旋转、倾斜、缩放、平移
有XYZ轴方向
⚠️只能转换由盒模型定位的元素
 scale(-2，2) 横向和纵向的缩放 translate(50%, 30px) 对象进行3D空间的位移  translate(-50%, -50%) // 可以做绝对定位元素的居中  rotate（30deg） 旋转30度 skew（30deg, 45deg）横向和纵向的倾斜 transform: none不应用任何转换 可以组合使用  对浏览器的兼容性支持
 Transition 过渡 用来补充中间帧
transition: 属性名 时长，属性名 时长 过渡方式 延迟
 transition-property: 过渡效果的 css 属性名 transition-duration：过渡完成所需的时间 transition-timing-function：速度效果的曲线。（复杂） transition-delay：延迟  all 代表所有属性
⚠️并不是所有属性都能过渡</description>
    </item>
    
    <item>
      <title>浏览器渲染过程</title>
      <link>/blog/render/</link>
      <pubDate>Fri, 06 Mar 2020 20:22:40 +0800</pubDate>
      
      <guid>/blog/render/</guid>
      <description>浏览器渲染过程  根据HTML构建html树（DOM） 根据css构建css树（cssom） 将两棵树合并成一颗渲染树（render tree） layout布局（文档流、盒模型、计算大小和位置） paint绘制（把边框颜色、文字颜色、阴影等画出来） compose合成（根据层叠关系展示页面）  如何更新样式
一般采用 js 来更新样式
div.style.display=&amp;#39;none&amp;#39; div.classList.add(&amp;#39;red&amp;#39;) div.remove() //直接删除节点 样式更新方式
 </description>
    </item>
    
    <item>
      <title>Flex &amp; Grid</title>
      <link>/blog/flex-grid/</link>
      <pubDate>Wed, 12 Feb 2020 18:22:40 +0800</pubDate>
      
      <guid>/blog/flex-grid/</guid>
      <description>Flexbox display: flex; align-items纵向对齐元素，可选以下几个值：
 flex-start: 元素与容器的顶部对齐。 flex-end: 元素与容器的底部对齐。 center: 元素纵向居中。 baseline: 元素在容器的基线位置显示。 stretch: 元素被拉伸以填满整个容器。  justify-content横向对齐元素:
 space-between ：分散对齐 space-around ：平均等宽横向对齐 flex-start(default)：默认 左对齐 flex-end ：右对齐 center ：居中  flex-direction属性定义了元素在容器里摆放的方向:
 row: 元素摆放的方向和文字方向一致。 row-reverse: 元素摆放的方向和文字方向相反。 column: 元素从上放到下。 column-reverse: 元素从下放到上。  order属性 设置单个元素的order。元素的属性默认值为0，但是我们设置这个属性为正数或负数。改变的单个flex元素的顺序
align-self设置其中单个元素的交叉轴位置
 flex-start: 元素与容器的顶部对齐。 flex-end: 元素与容器的底部对齐。 center: 元素纵向居中。 baseline: 元素在容器的基线位置显示。 stretch: 元素被拉伸以填满整个容器。  flex-wrap
 nowrap: 所有的元素都在一行。 wrap: 元素自动换成多行。 wrap-reverse: 元素自动换成逆序的多行。  flex-flow 是 flex-direction + flex-wrap两个属性的合体 可以同时接受两个 属性值。</description>
    </item>
    
  </channel>
</rss>