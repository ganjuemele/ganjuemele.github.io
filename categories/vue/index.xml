<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on 么了&#39;s 博客</title>
    <link>/categories/vue/</link>
    <description>Recent content in vue on 么了&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 09 Apr 2020 14:22:40 +0800</lastBuildDate>
    
	<atom:link href="/categories/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue实例&amp;模版语法</title>
      <link>/blog/vue-note/</link>
      <pubDate>Thu, 09 Apr 2020 14:22:40 +0800</pubDate>
      
      <guid>/blog/vue-note/</guid>
      <description>Object.freeze() 方法可以冻结一个对象， 冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性， 以及不能修改该对象已有属性的可枚举性、可配置性、可写性。
const object2 = Object.freeze(object1);  其中 object2 和 object1 是同一个对象
 Vue 实例的生命周期钩子不要写成箭头函数，给出的理由是什么?  箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例 经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</description>
    </item>
    
    <item>
      <title>vue</title>
      <link>/blog/note-2/</link>
      <pubDate>Fri, 27 Mar 2020 20:40:40 +0800</pubDate>
      
      <guid>/blog/note-2/</guid>
      <description>&amp;lt;stylescopedlang=&amp;#39;scss&amp;#39;&amp;gt; .x::v-deep li { // 或者使用 /deep/ border: 1px solid red; } &amp;lt;/style&amp;gt; 往深处继续找 deep语法</description>
    </item>
    
    <item>
      <title>Vuex的总结</title>
      <link>/blog/vuex/</link>
      <pubDate>Fri, 27 Mar 2020 14:22:40 +0800</pubDate>
      
      <guid>/blog/vuex/</guid>
      <description>Vue.use(Vuex)
// ~/main.ts  new Vue({ router, store, //引用进去  render: h =&amp;gt; h(App) }).$mount(&amp;#39;#app&amp;#39;); const store = new Vuex.store({ state: { count:0 ... ... }, mutations: { method1 (state){ state.count }, ... } }) 组件components中使用
读：对象 computed获取 @Component({ components: {xxx}, computed: { tags() { return this.$store.state.count } } }) 类 js/ts export default class EditLabel extends Vue { get currentTag (){ return this.$store.state.currentTag } } 写： this.$store.commit(&amp;#39;updateTag&amp;#39;,{id:this.currentTag.id, name}); </description>
    </item>
    
    <item>
      <title>写Vue组件的三种方式</title>
      <link>/blog/vue-component/</link>
      <pubDate>Tue, 17 Mar 2020 20:40:40 +0800</pubDate>
      
      <guid>/blog/vue-component/</guid>
      <description>  使用 JS 对象 export default { data, props, methods, created, ……}
  使用 TS 类 &amp;lt;script lang=&amp;quot;ts&amp;quot;&amp;gt; import {Component,Prop} from &#39;vue-property-decorator&#39;
  @Compotent export default class XXX extends Vue { xxx: string = &amp;#39;hi&amp;#39;; @Prop(Number) xxx: number | undefined; } //(Number)运行时检查xxx的参数类型是否为number //编译时 `xxx: number | undefined` 中的xxx可以为number也可以是undefined  使用 JS 类 &amp;lt;script lang=&amp;quot;js&amp;quot;&amp;gt;  @Compotent export default class XXX extends Vue { xxx = &amp;#39;hi&amp;#39; } </description>
    </item>
    
    <item>
      <title>Vue的sync修饰符</title>
      <link>/blog/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Tue, 10 Mar 2020 15:22:40 +0800</pubDate>
      
      <guid>/blog/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>修饰符sync 让子组件改变父组件状态的代码更容易被区分，作为编译时的语法糖存在，被扩展为一个自动更新父组件属性的v-on监听器。
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div&amp;gt;{{bar}}&amp;lt;/div&amp;gt; &amp;lt;my-comp :foo.sync=&amp;#34;bar&amp;#34;&amp;gt;&amp;lt;/my-comp&amp;gt; // 下面扩展出来的写法 &amp;lt;!--&amp;lt;my-comp :foo=&amp;#34;bar&amp;#34; @update:foo=&amp;#34;val =&amp;gt; bar = val&amp;#34;&amp;gt;&amp;lt;/my-comp&amp;gt; --&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; Vue.component(&amp;#39;my-comp&amp;#39;, { template: &amp;#39;&amp;lt;div @click=&amp;#34;increment&amp;#34;&amp;gt;点我+1&amp;lt;/div&amp;gt;&amp;#39;, data: function() { return {copyFoo: this.foo} }, props: [&amp;#39;foo&amp;#39;], methods: { increment: function() { this.$emit(&amp;#39;update:foo&amp;#39;, ++this.copyFoo); } } }); new Vue({ el: &amp;#39;#app&amp;#39;, data: {bar: 0} }); &amp;lt;/script&amp;gt; ⚠️注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的。 取而代之的是，你只能提供你想要绑定的属性名，类似 v-model。</description>
    </item>
    
    <item>
      <title>watch和computed</title>
      <link>/blog/watch%E5%92%8Ccomputed/</link>
      <pubDate>Mon, 09 Mar 2020 20:22:40 +0800</pubDate>
      
      <guid>/blog/watch%E5%92%8Ccomputed/</guid>
      <description>watch watch 有数据监听回调的作用，用来观察和响应Vue实例上的数据变动。data数据变化执行回调，在方法中传入新的值和旧的值.
immediate: true/false
deep: true/false; //监听 obj 的时候是否往深处查。默认false
⚠️不要使用箭头函数来定义 watch 函数
watch允许执行异步操作，在得到最终结果前，设置中间状态，这些是 computed 无法做到的
 computed computed 是计算属性，不需要加括号。
会根据所依赖的数据动态显示计算结果。计算结果会被缓存，computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次回去computed的值才会重新调用对应的getter来计算
&amp;lt;div id=&amp;#34;demo&amp;#34;&amp;gt;{{ fullName }}&amp;lt;/div&amp;gt; var vm = new Vue({ el: &amp;#39;#demo&amp;#39;, data: { firstName: &amp;#39;Foo&amp;#39;, lastName: &amp;#39;Bar&amp;#39; }, computed: { fullName: function () { return this.firstName + &amp;#39; &amp;#39; + this.lastName } } }) 默认只有getter，在需要时可以提供setter
// ... computed: { fullName: { // getter  get: function () { return this.</description>
    </item>
    
  </channel>
</rss>